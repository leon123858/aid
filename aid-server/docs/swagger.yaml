basePath: /
definitions:
  server.AskRequest:
    properties:
      browser:
        type: string
      ip:
        type: string
    type: object
  server.LoginRequest:
    properties:
      aid:
        type: string
      browser:
        type: string
      ip:
        type: string
      sign:
        type: string
      timestamp:
        type: string
    type: object
  server.LogoutRequest:
    properties:
      aid:
        type: string
      browser:
        type: string
      ip:
        type: string
    type: object
  server.RegisterRequest:
    properties:
      aid:
        type: string
      browser:
        type: string
      ip:
        type: string
      publicKey:
        type: string
    type: object
  server.Response:
    properties:
      content:
        type: string
      result:
        type: boolean
    type: object
  server.TriggerRequest:
    properties:
      browser:
        type: string
      ip:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: a0970785699@gmail.com
    name: Leon Lin
    url: github.com/leon123858
  description: This is a AID server implementation for my paper.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: AID API Server
  version: "1.0"
paths:
  /api/ask:
    post:
      consumes:
      - application/json
      description: Ask
      parameters:
      - description: Ask Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.AskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: aid string
          schema:
            $ref: '#/definitions/server.Response'
      summary: Ask
      tags:
      - Auth
  /api/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            $ref: '#/definitions/server.Response'
      summary: Login
      tags:
      - Auth
  /api/logout:
    post:
      consumes:
      - application/json
      description: Logout
      parameters:
      - description: Logout Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: empty string
          schema:
            $ref: '#/definitions/server.Response'
      summary: Logout
      tags:
      - Auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            $ref: '#/definitions/server.Response'
      summary: Register
      tags:
      - Auth
  /api/trigger:
    post:
      consumes:
      - application/json
      description: Trigger
      parameters:
      - description: Trigger Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/server.TriggerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: aid string
          schema:
            $ref: '#/definitions/server.Response'
      summary: Trigger
      tags:
      - Auth
swagger: "2.0"
